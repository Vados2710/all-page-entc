! function (s, m) {
    var a = /\+/g;

    function c(e) {
        return e
    }

    function l(e) {
        return decodeURIComponent(e.replace(a, " "))
    }
    s.cookie = function (e, a, t) {
        var r, n;
        if (1 < arguments.length && (!/Object/.test(Object.prototype.toString.call(a)) || null == a)) return t = s.extend({}, s.cookie.defaults, t), null == a && (t.expires = -1), "number" == typeof t.expires && (r = t.expires, (n = t.expires = new Date).setDate(n.getDate() + r)), a = String(a), m.cookie = [encodeURIComponent(e), "=", t.raw ? a : encodeURIComponent(a), t.expires ? "; expires=" + t.expires.toUTCString() : "", t.path ? "; path=" + t.path : "", t.domain ? "; domain=" + t.domain : "", t.secure ? "; secure" : ""].join("");
        for (var i, o = (t = a || s.cookie.defaults || {}).raw ? c : l, d = m.cookie.split("; "), u = 0; i = d[u] && d[u].split("="); u++)
            if (o(i.shift()) === e) return o(i.join("="));
        return null
    }, s.cookie.defaults = {}
}(jQuery, document);
var months_localized = {
        ru: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"],
        fr: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
        bg: ["Януари", "Февруари", "Март", "Април", "Май", "Юни", "Юли", "Август", "Септември", "Октомври", "Ноември", "Декември"],
        nl: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"],
        pt: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        de: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        tr: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
        it: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
        hu: ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
        en: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        id: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"],
        ms: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"],
        hi: ["जनवर", "फरबर", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर"],
        es: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
        ro: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"],
        pl: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia"],
        sr: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
        cs: ["ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince"],
        sk: ["januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra"],
        el: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"],
        th: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"],
        vi: ["Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Bốn", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám"],
        fil: ["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre"],
        ar: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"],
        ur: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر"],
        nb: ["Januar", "Februar", "Mars ", "April ", "May ", "Juni ", "Juli ", "August ", "September ", "Oktober ", "November ", "Desember "],
        nn: ["Januar", "Februar", "Mars ", "April ", "May ", "Juni ", "Juli ", "August ", "September ", "Oktober ", "November ", "Desember "],
        no: ["Januar", "Februar", "Mars ", "April ", "May ", "Juni ", "Juli ", "August ", "September ", "Oktober ", "November ", "Desember "],
        nb_NO: ["Januar", "Februar", "Mars ", "April ", "May ", "Juni ", "Juli ", "August ", "September ", "Oktober ", "November ", "Desember "],
        km: ["មករា", "កុម្ភៈ", "មិនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "‘វិច្ឆិកា", "ធ្នូ"],
        zh: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
    },
    days_localized = {
        ru: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],
        fr: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"],
        bg: ["Неделя", "Понеделник", "Вторник", "Сряда", "Четвъртък", "Петък", "Събота"],
        nl: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
        pt: ["Domingo", "Segunda Feira", "Terça Feira", "Quarta Feira", "Quinta Feira", "Sexta Feira", "Sábado"],
        de: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
        tr: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
        it: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"],
        hu: ["Vasárnap", "Hétfő", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
        en: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        hi: ["सोमवार", "मंगलवार", "बुधवार", "गुरूवार", "शुक्रवार", "शनिवार", "रविवार"],
        ms: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
        id: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
        es: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
        ro: ["Duminică", "Luni", "Marţi", "Miercuri", "Joi", "Vineri", "Sâmbătă"],
        pl: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"],
        sr: ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
        cs: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
        sk: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
        el: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
        th: ["วันอาทิตย์", "วันจันทร์", "วันอังคาร", "วันพุธ", "วันพฤหัสบดี", "วันศุกร์", "วันเสาร์"],
        vi: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
        ar: ["الاحد", "الاثنين", "الثلاثاء", "الاربعاء", "الخميس", "الجمعة", "السبت"],
        fil: ["Linggo", "Lunes", "Martes", "Miyerkoles", "Huebes", "Biyernes", "Sabado"],
        ur: ["اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"],
        nb: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Friday", "Lørdag"],
        nn: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Friday", "Lørdag"],
        no: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Friday", "Lørdag"],
        nb_NO: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Friday", "Lørdag"],
        km: ["អាទិត្យ", "ច័ន្ធ", "អង្គារ៍", "ពុធ", "ព្រហស្បិ៍", "សុក្រ", "សៅរ៍"],
        zh: ["星期天", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
    },
    AdcLandDate = function (e) {
        var a = e.shift,
            t = e.mode,
            r = void 0 === t ? "dtime_nums" : t,
            n = e.old,
            t = void 0 === n || n,
            n = e.euFormat,
            n = void 0 === n ? 1 : n,
            e = e.index,
            e = void 0 === e ? 0 : e;
        this._mode = r, this._shift = ~["rdate"].indexOf(r) || isNaN(+a) || !a ? 0 : +a, this._oldMethod = t, this._euFormat = !!+n, this._indexOfCollection = e, this._compileDate(this._shift)
    };

function getLocalizedEntity(e, a) {
    e = new Date(e);
    var t = window.lang_locale || "en",
        a = {
            month: {
                dict: months_localized,
                method: "getMonth"
            },
            day: {
                dict: days_localized,
                method: "getDay"
            }
        } [a];
    return a ? a.dict[a.dict[t] ? t : "en"][e[a.method]()] : "Unknown entity"
}

function dtime_nums(e, a) {
    a = new AdcLandDate({
        shift: e,
        euFormat: a
    });
    document.write(a.toString())
}

function dtime(e) {
    e = new AdcLandDate({
        mode: "dtime",
        shift: e
    });
    document.write(e.toString())
}

function dtimes(e) {
    e = new AdcLandDate({
        mode: "dtimes",
        shift: e
    });
    document.write(e.toString())
}
AdcLandDate.prototype._compileDate = function (e) {
    var a = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : new Date;
    this._day = a, this._day.setDate(this._day.getDate() + (isNaN(+e) ? 0 : e) + (this._oldMethod && "dtimes" !== this._mode ? 1 : 0))
}, AdcLandDate.prototype._getLocalizedEntity = getLocalizedEntity, AdcLandDate.prototype._formatNum = function (e) {
    return ("0" + e).slice(-2)
}, AdcLandDate.prototype.getDate = function () {
    var r = this;
    return {
        dtime_nums: function () {
            return {
                day: r._formatNum(r._day.getDate()),
                month: r._formatNum(r._day.getMonth() + 1),
                year: r._day.getFullYear()
            }
        },
        dtime: function () {
            return {
                weekDay: r._getLocalizedEntity(r._day, "day"),
                day: r._day.getDate(),
                month: r._getLocalizedEntity(r._day, "month"),
                year: r._day.getFullYear()
            }
        },
        dtimes: function () {
            return {
                day: r._day.getDate(),
                month: r._getLocalizedEntity(r._day, "month")
            }
        },
        ryear: function () {
            return {
                year: r._day.getFullYear()
            }
        },
        rstart: function () {
            return r._compileDate(r._shift, new Date(parseInt($.cookie("randDate")))), {
                day: r._formatNum(r._day.getDate()),
                month: r._formatNum(r._day.getMonth() + 1),
                year: r._day.getFullYear()
            }
        },
        rdate: function (e) {
            var a = 16 <= e ? 16 : e,
                t = new Date(parseInt($.cookie("randDate"))),
                a = new Date(t.getTime() + a * (12 + a) * (60 + e) * 60 * (1e3 + e));
            return 31 <= e && (a = new Date(t.getTime() + 24946e5 + 15e4 * e)), r._compileDate(r._shift, a), {
                day: r._formatNum(r._day.getDate()),
                month: r._formatNum(r._day.getMonth() + 1),
                year: r._day.getFullYear(),
                hours: r._formatNum(r._day.getHours()),
                minutes: r._formatNum(r._day.getMinutes()),
                seconds: r._formatNum(r._day.getSeconds())
            }
        }
    } [this._mode](this._indexOfCollection)
}, AdcLandDate.prototype.toString = function () {
    var e = this,
        a = this.getDate(this._indexOfCollection),
        t = {
            dtime_nums: function () {
                return (e._euFormat ? "".concat(a.day, ".").concat(a.month, ".") : "".concat(a.month, ".").concat(a.day, ".")).concat(a.year)
            },
            dtime: function () {
                return "".concat(a.weekDay, " ").concat(a.day, ", ").concat(a.month, " ").concat(a.year)
            },
            dtimes: function () {
                return "".concat(a.day, " ").concat(a.month)
            },
            ryear: function () {
                return a.year
            },
            rstart: function () {
                return "".concat(a.day, "../../default.htm").concat(a.month, "../../default.htm").concat(a.year)
            },
            rdate: function () {
                return "".concat(a.day, ".").concat(a.month, ".").concat(a.year, " - ").concat(a.hours, ":").concat(a.minutes)
            }
        };
    return t[this._mode] ? t[this._mode]() : ""
}, AdcLandDate.init = function () {
    $.cookie("randDate") || $.cookie("randDate", (new Date).getTime() - 2592e6, {
        expires: 1
    })
}, AdcLandDate.init(), $(function () {
    $.fn.adcLandDate = function (n) {
        var i = this;
        i.each(function (e) {
            var a = i.eq(e),
                t = a.attr("data-date-shift"),
                r = a.attr("data-date-eu"),
                r = new AdcLandDate({
                    mode: n,
                    shift: t,
                    old: !1,
                    index: e,
                    euFormat: r
                });
            a.text(r.toString())
        })
    }, $(".ryear, .nowyear").adcLandDate("ryear"), $(".rstart, .startdate").adcLandDate("rstart"), $(".rdate, .ypdate").adcLandDate("rdate"), $(".dtime").adcLandDate("dtime"), $(".dtime_nums").adcLandDate("dtime_nums"), $(".dtimes").adcLandDate("dtimes")
});
! function (t) {
    "use strict";
    t.Placeholders = {
        Utils: {
            addEventListener: function (t, e, r) {
                return t.addEventListener ? t.addEventListener(e, r, !1) : t.attachEvent ? t.attachEvent("on" + e, r) : void 0
            },
            inArray: function (t, e) {
                for (var r = 0, a = t.length; r < a; r++)
                    if (t[r] === e) return !0;
                return !1
            },
            moveCaret: function (t, e) {
                var r;
                t.createTextRange ? ((r = t.createTextRange()).move("character", e), r.select()) : t.selectionStart && (t.focus(), t.setSelectionRange(e, e))
            },
            changeType: function (t, e) {
                try {
                    return t.type = e, !0
                } catch (t) {
                    return !1
                }
            }
        }
    }
}(this),
function (t) {
    "use strict";
    var l, o, c, e, s, d, r, g, a, n, u, i = ["text", "search", "url", "tel", "email", "password", "number", "textarea"],
        v = [27, 33, 34, 35, 36, 37, 38, 39, 40, 8, 46],
        p = "placeholdersjs",
        b = new RegExp("(?:^|\\s)" + p + "(?!\\S)"),
        m = "data-placeholder-value",
        h = "data-placeholder-active",
        f = "data-placeholder-type",
        A = "data-placeholder-submit",
        y = "data-placeholder-bound",
        E = "data-placeholder-maxlength",
        x = document.createElement("input"),
        L = document.getElementsByTagName("head")[0],
        T = document.documentElement,
        N = t.Placeholders,
        S = N.Utils;

    function w() {}

    function B() {
        try {
            return document.activeElement
        } catch (t) {}
    }

    function C(t, e) {
        var r = !!e && t.value !== e,
            e = t.value === t.getAttribute(m);
        return !(!r && !e || "true" !== t.getAttribute(h)) && (t.removeAttribute(h), t.value = t.value.replace(t.getAttribute(m), ""), t.className = t.className.replace(b, ""), e = t.getAttribute(E), 0 <= parseInt(e, 10) && (t.setAttribute("maxLength", e), t.removeAttribute(E)), (e = t.getAttribute(f)) && (t.type = e), !0)
    }

    function k(t) {
        var e = t.getAttribute(m);
        return !("" !== t.value || !e) && (t.setAttribute(h, "true"), t.value = e, t.className += " " + p, t.getAttribute(E) || (t.setAttribute(E, t.maxLength), t.removeAttribute("maxLength")), t.getAttribute(f) ? t.type = "text" : "password" === t.type && S.changeType(t, "text") && t.setAttribute(f, "password"), !0)
    }

    function I(t, e) {
        var r, a, n, u, i;
        if (t && t.getAttribute(m)) e(t);
        else
            for (a = t ? t.getElementsByTagName("input") : l, n = t ? t.getElementsByTagName("textarea") : o, i = 0, u = (r = a ? a.length : 0) + (n ? n.length : 0); i < u; i++) e(i < r ? a[i] : n[i - r])
    }

    function R(t) {
        I(t, C)
    }

    function V(t) {
        var e, r, a, n, u, i;
        t.form && ("string" == typeof (g = t.form) && (g = document.getElementById(g)), g.getAttribute(A) || (S.addEventListener(g, "submit", (e = g, function () {
            R(e)
        })), g.setAttribute(A, "true"))), S.addEventListener(t, "focus", (r = t, function () {
            c && r.value === r.getAttribute(m) && "true" === r.getAttribute(h) ? S.moveCaret(r, 0) : C(r)
        })), S.addEventListener(t, "blur", (a = t, function () {
            k(a)
        })), c && (S.addEventListener(t, "keydown", (i = t, function (t) {
            if (s = i.value, "true" === i.getAttribute(h) && s === i.getAttribute(m) && S.inArray(v, t.keyCode)) return t.preventDefault && t.preventDefault(), !1
        })), S.addEventListener(t, "keyup", (u = t, function () {
            C(u, s), "" === u.value && (u.blur(), S.moveCaret(u, 0))
        })), S.addEventListener(t, "click", (n = t, function () {
            n === B() && n.value === n.getAttribute(m) && "true" === n.getAttribute(h) && S.moveCaret(n, 0)
        }))), t.setAttribute(y, "true"), t.setAttribute(m, d), !c && t === B() || k(t)
    }
    if (N.nativeSupport = void 0 !== x.placeholder, !N.nativeSupport) {
        for (l = document.getElementsByTagName("input"), o = document.getElementsByTagName("textarea"), c = "false" === T.getAttribute("data-placeholder-focus"), e = "false" !== T.getAttribute("data-placeholder-live"), (x = document.createElement("style")).type = "text/css", T = document.createTextNode("." + p + " { color:#ccc; }"), x.styleSheet ? x.styleSheet.cssText = T.nodeValue : x.appendChild(T), L.insertBefore(x, L.firstChild), u = 0, n = l.length + o.length; u < n; u++) a = u < l.length ? l[u] : o[u - l.length], (d = (d = a.attributes.placeholder) && d.nodeValue) && S.inArray(i, a.type) && V(a);
        r = setInterval(function () {
            for (u = 0, n = l.length + o.length; u < n; u++) a = u < l.length ? l[u] : o[u - l.length], (d = a.attributes.placeholder) ? (d = d.nodeValue) && S.inArray(i, a.type) && (a.getAttribute(y) || V(a), d === a.getAttribute(m) && ("password" !== a.type || a.getAttribute(f)) || ("password" === a.type && !a.getAttribute(f) && S.changeType(a, "text") && a.setAttribute(f, "password"), a.value === a.getAttribute(m) && (a.value = d), a.setAttribute(m, d))) : a.getAttribute(h) && (C(a), a.removeAttribute(m));
            e || clearInterval(r)
        }, 100)
    }
    S.addEventListener(t, "beforeunload", function () {
        N.disable()
    }), N.disable = N.nativeSupport ? w : R, N.enable = N.nativeSupport ? w : function (t) {
        I(t, k)
    }
}(this);

function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e
    } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}
var adcValid;
"object" !== _typeof(adcValid) && (adcValid = {}), adcValid.errorMes = {
    settings: {
        button: [],
        message: "js_errorMessage"
    },
    remove: function () {
        $("." + this.settings.message + ", ." + this.settings.message + "2").remove()
    },
    mes: function (e, r) {
        var i, t, s, o = this,
            a = "function" == typeof e.attr ? e : $(e);
        if (!a.length) return console.error("Not an item to display an error", a), !1;
        s = o.body === o.add ? (o.add.add("html"), t = a.offset().left, a.offset().top) : (t = a.offset().left - o.add.offset().left, a.offset().top - o.add.offset().top + o.add.scrollTop()), o.add.animate({
            scrollTop: s - 50
        }, 0, function () {
            i = "left: " + t + "px;top: " + (s - 36) + "px;background-color: #e74c3c;border-radius: 5px;border: 1px dashed black;color: #fff;font-family: Arial, 'Nimbus Sans L', Helvetica, sans-serif;font-size: 14px;margin: 3px 0 0 0px;padding: 6px 5px 5px;position: absolute;display: block;z-index: 9999", o.remove(), o.add.append('<div class="' + o.settings.message + '2" style="' + i + '">' + r + "</div>"), a.focus()
        })
    },
    resize: function () {
        var e = this;
        e.window.resize(function () {
            e.remove()
        })
    },
    init: function () {
        var t = this;
        t.window = $(window), t.body = $("body"), t.add = t.body, t.click = $("input, textarea").add(t.body), t.click.on("touchend click", function (e) {
            for (var r = !0, i = 0; i < t.settings.button.length; i++)($(e.target).closest("." + t.settings.button[i]).length || e.target.classList.contains(t.settings.button[i])) && (r = !1);
            r && t.remove()
        }), t.resize()
    }
}
function cancelEvent(e) {
    try {
        e && (e.returnValue = defaults.get_locale_var("exit_text"), e.cancelBubble = !0, e.stopPropagation && e.stopPropagation(), e.preventDefault && e.preventDefault())
    } catch (e) {}
    return defaults.get_locale_var("exit_text")
}

function RemoveUnload() {
    window.onbeforeunload = null
}

function showLoader() {
    var e = document.createElement("div");
    e.id = "loader-block", e.className = "loader-block", document.getElementsByTagName("body")[0].appendChild(e);
    e = {
        position: "fixed",
        top: 0,
        left: 0,
        "z-index": 9999,
        width: "100%",
        height: "100%",
        background: "url(../img/loader.gif) center center rgba(0,0,0,0.5) no-repeat"
    };
    $("#loader-block").css(e), $("#loader-block").animate({
        opacity: 0
    }, 2e4, function () {
        hideLoader()
    })
}

function hideLoader() {
    $("#loader-block").remove()
}

// function sendOrderData(r, i) {
//     $.post("../../order/create/default.htm", r, function(e) {
//         if ($('input[name="esub"]').val(r.esub), r.pixel_code && $("body").append(r.pixel_code), void 0 !== i) return i()
//     })
// }

function renderQueryVariable() {
    $("#parse-params__brand").text(window.brand), $("#parse-params__model").text(window.model)
}